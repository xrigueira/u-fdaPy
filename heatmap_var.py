
import numpy as np
import pandas as pd
import seaborn as sb
from matplotlib import pyplot as plt

# x chart data
data_oxygen = [15.766, 15.781, 11.71, 12.819, 12.69, 12.067, 11.807, 11.241, 11.652, 12.501, 10.521, 9.161, 9.036, 8.935, 9.287, 8.589, 9.565, 8.969, 10.842, 9.667, 9.149, 9.477, 9.131, 9.644, 9.499, 10.377, 9.853, 10.17, 11.275, 10.988, 10.064, 11.634, 10.355, 12.13, 12.834, 13.447, 13.486, 12.449, 11.137, 12.074, 14.275, 7.297, 10.3, 12.458, 10.758, 9.581, 11.769, 12.827, 12.766, 11.617, 10.748, 10.14, 10.616, 10.152, 9.917, 10.561, 10.263, 11.162, 11.156, 10.925, 11.053, 11.334, 12.371, 11.551, 11.411, 13.335, 12.801, 9.35, 10.955, 11.03, 11.619, 12.171, 9.716, 8.871, 10.001, 10.085, 12.652, 13.539, 12.667, 11.205, 12.184, 12.683, 13.277, 
12.606, 12.167, 11.65, 11.758, 11.096, 11.069, 11.772, 11.03, 10.702, 9.621, 9.223, 8.894, 9.632, 9.223, 13.304, 13.698, 14.829, 15.008, 13.793, 13.388, 13.023, 10.815, 13.766]
data_temperature = [6.203, 7.635, 8.774, 9.15, 11.763, 12.191, 12.025, 12.671, 13.959, 13.685, 15.178, 15.954, 17.59, 16.983, 20.295, 19.669, 21.088, 22.767, 24.983, 24.775, 24.462, 25.013, 23.482, 23.304, 24.055, 20.22, 19.894, 21.585, 18.61, 17.669, 15.445, 16.285, 9.099, 7.136, 7.046, 6.654, 7.048, 9.351, 9.874, 10.602, 10.928, 10.373, 11.942, 13.216, 14.891, 17.809, 20.818, 19.16, 22.496, 22.965, 23.176, 23.33, 25.467, 24.951, 25.023, 
24.229, 23.92, 21.91, 20.889, 21.773, 21.61, 18.057, 16.025, 14.232, 13.512, 11.222, 9.203, 9.176, 8.761, 7.051, 5.458, 6.286, 7.531, 9.72, 9.292, 9.911, 10.964, 11.608, 10.922, 13.982, 14.141, 13.667, 14.456, 15.971, 18.645, 18.575, 18.564, 21.009, 24.115, 24.476, 22.853, 22.875, 24.838, 23.132, 24.099, 24.93, 23.373, 16.98, 16.005, 16.195, 14.909, 12.122, 11.316, 10.543, 8.158, 8.175]
data_caudal = [45.185, 46.312, 385.545, 215.481, 123.326, 117.823, 115.545, 96.076, 61.24, 72.107, 149.088, 87.513, 64.301, 117.872, 72.43, 77.58, 48.193, 49.826, 41.82, 48.443, 48.432, 49.07, 44.531, 47.039, 48.24, 43.446, 58.208, 61.476, 44.83, 48.246, 85.86, 43.638, 328.137, 227.077, 175.647, 140.113, 190.833, 184.223, 178.527, 119.013, 82.949, 416.338, 289.335, 166.664, 234.646, 186.699, 75.891, 80.667, 52.196, 48.991, 54.847, 50.807, 44.006, 47.564, 55.371, 60.594, 50.939, 42.501, 43.33, 43.271, 49.888, 67.418, 69.479, 120.763, 90.07, 58.634, 62.304, 315.28, 185.984, 307.112, 226.765, 262.482, 431.098, 465.722, 497.568, 315.707, 184.031, 127.61, 185.49, 98.598, 73.467, 75.99, 58.159, 67.332, 56.716, 64.201, 42.641, 60.768, 57.092, 47.219, 52.161, 45.32, 42.811, 47.036, 47.496, 40.265, 45.0, 36.534, 31.351, 28.385, 32.143, 55.286, 38.693, 55.26, 
552.591, 273.464]
data_conductividad = [1152.453, 1206.35, 599.155, 732.432, 864.784, 879.41, 900.193, 870.211, 1044.501, 1087.225, 818.247, 869.761, 1061.291, 840.074, 996.507, 962.74, 1116.39, 1081.61, 1236.548, 1166.451, 1128.154, 1196.066, 1151.33, 1190.088, 1222.753, 1320.049, 1226.396, 1178.15, 1261.56, 1270.124, 1063.141, 1158.353, 580.04, 740.133, 803.443, 865.302, 802.068, 779.938, 741.536, 835.946, 989.89, 507.032, 670.946, 887.463, 753.292, 823.115, 1049.49, 1116.004, 1191.723, 1169.821, 1148.927, 1117.414, 1186.409, 1147.0, 1156.188, 1210.612, 1234.104, 1349.54, 1342.115, 1330.23, 1243.538, 1308.108, 979.393, 801.08, 836.083, 1034.057, 1097.99, 529.734, 684.379, 578.068, 641.696, 664.978, 512.815, 553.855, 557.568, 623.449, 818.637, 920.134, 776.508, 878.661, 1007.207, 1045.954, 1123.743, 1134.705, 1153.306, 1170.854, 1288.844, 1269.51, 1273.012, 1308.755, 1237.462, 1253.015, 1263.077, 1193.21, 1224.522, 1355.492, 1330.321, 1456.413, 1454.629, 1571.638, 1564.634, 1360.068, 1306.103, 1234.231, 612.84, 816.71]
data_amonio = [0.028, 0.023, 0.023, 0.022, 0.023, 0.025, 0.03, 0.025, 0.025, 0.024, 0.029, 0.022, 0.023, 0.029, 0.025, 0.022, 0.024, 0.026, 0.041, 0.073, 0.079, 0.03, 0.03, 0.028, 0.022, 0.023, 0.023, 0.028, 0.05, 0.026, 0.033, 0.04, 0.02, 0.023, 0.023, 0.022, 0.031, 0.023, 0.023, 0.024, 0.023, 0.022, 0.023, 0.022, 0.021, 0.037, 0.023, 0.022, 0.022, 0.022, 0.022, 0.023, 0.023, 0.022, 0.023, 0.022, 0.022, 0.022, 0.022, 0.021, 0.022, 0.022, 0.023, 0.022, 0.023, 0.022, 0.022, 0.023, 0.057, 0.066, 0.025, 0.052, 0.042, 0.023, 0.021, 0.023, 0.023, 0.023, 0.023, 0.022, 0.023, 0.022, 0.023, 0.037, 0.023, 0.023, 0.023, 0.024, 0.028, 0.023, 0.022, 0.022, 0.022, 0.023, 0.022, 0.023, 0.022, 0.04, 0.02, 0.021, 0.023, 0.023, 0.023, 0.023, 0.025, 0.026]

def tsCompare(data):

    # Normalize the data (divide each value by the mean)
    mean = np.mean(data)

    data_norm = []
    for i in data:
        data_norm.append(i/mean)
    
    # Get the difference between one point and the preious one (moving range)
    sierra = []
    for i in range(len(data)):

        if i != 0:

            sierra.append(abs(data_norm[i] - data_norm[i-1]))
    
    return data_norm, sierra

oxygen_norm, oxygen_sierra = tsCompare(data=data_caudal)
temperature_norm, temperature_sierra = tsCompare(data=data_conductividad)

# Probar con otras variables
# print(np.var(oxygen_sierra))
# print(np.var(temperature_sierra)) 

# plt.plot(oxygen_norm)
# plt.plot(temperature_norm)
# plt.show()

timeStamps = ["('2019 1 7', '2019 1 13')", "('2019 1 14', '2019 1 20')", "('2019 2 11', '2019 2 17')", "('2019 2 18', '2019 2 24')", "('2019 3 1', '2019 3 7')", "('2019 3 8', '2019 3 14')", "('2019 3 15', '2019 3 21')", "('2019 3 22', '2019 3 28')", "('2019 3 29', '2019 4 4')", "('2019 4 5', '2019 4 11')", "('2019 4 19', '2019 4 25')", "('2019 5 2', '2019 5 8')", "('2019 5 9', '2019 5 15')", "('2019 5 23', '2019 5 29')", "('2019 5 30', '2019 6 5')", "('2019 6 6', '2019 6 12')", "('2019 6 13', '2019 6 19')", "('2019 6 20', '2019 6 26')", "('2019 7 17', '2019 7 23')", "('2019 7 24', '2019 7 30')", "('2019 7 31', '2019 8 6')", "('2019 8 7', '2019 8 13')", "('2019 8 14', '2019 8 20')", "('2019 8 21', '2019 8 27')", "('2019 8 28', '2019 9 3')", "('2019 9 4', '2019 9 10')", "('2019 9 11', '2019 9 17')", "('2019 9 18', '2019 9 24')", "('2019 10 8', '2019 10 14')", "('2019 10 15', '2019 10 21')", "('2019 10 22', '2019 10 28')", "('2019 10 29', '2019 11 4')", "('2019 12 2', '2019 12 8')", "('2019 12 30', '2020 1 5')", "('2020 1 6', '2020 1 12')", "('2020 1 13', '2020 1 19')", "('2020 1 20', '2020 1 26')", "('2020 1 27', '2020 2 2')", "('2020 2 3', '2020 2 9')", "('2020 2 10', '2020 2 16')", "('2020 2 17', '2020 2 23')", "('2020 3 7', '2020 3 13')", "('2020 3 21', '2020 3 27')", "('2020 4 4', '2020 4 10')", "('2020 4 11', '2020 4 17')", "('2020 5 1', '2020 5 7')", 
"('2020 5 22', '2020 5 28')", "('2020 6 12', '2020 6 18')", "('2020 6 19', '2020 6 25')", "('2020 7 2', '2020 7 8')", "('2020 7 9', '2020 7 15')", "('2020 7 16', '2020 7 22')", "('2020 7 23', '2020 7 29')", "('2020 7 30', '2020 8 5')", "('2020 8 6', '2020 8 12')", "('2020 8 13', '2020 8 19')", "('2020 8 20', '2020 8 26')", "('2020 8 27', '2020 9 2')", "('2020 9 3', '2020 9 9')", "('2020 9 10', '2020 9 16')", "('2020 9 17', '2020 9 23')", "('2020 9 24', '2020 9 30')", "('2020 10 7', '2020 10 13')", "('2020 10 21', '2020 10 27')", "('2020 10 28', '2020 11 3')", "('2020 11 18', '2020 11 24')", "('2020 12 1', '2020 12 7')", "('2020 12 15', '2020 12 21')", "('2020 12 22', '2020 12 28')", "('2020 12 29', '2021 1 4')", "('2021 1 5', '2021 1 11')", "('2021 1 12', '2021 1 18')", "('2021 1 19', '2021 1 25')", "('2021 2 2', '2021 2 8')", "('2021 2 9', '2021 2 15')", "('2021 2 16', '2021 2 22')", "('2021 3 6', '2021 3 12')", "('2021 3 13', '2021 3 19')", "('2021 3 20', '2021 3 26')", "('2021 3 27', '2021 4 2')", "('2021 4 3', '2021 4 9')", "('2021 4 10', '2021 4 16')", "('2021 4 17', '2021 4 23')", "('2021 4 24', '2021 4 30')", "('2021 5 7', '2021 5 13')", "('2021 5 14', '2021 5 20')", "('2021 5 21', '2021 5 27')", "('2021 5 28', '2021 6 3')", "('2021 6 11', '2021 6 17')", "('2021 7 1', '2021 7 7')", "('2021 7 8', '2021 7 14')", "('2021 7 15', '2021 7 21')", 
"('2021 7 22', '2021 7 28')", "('2021 7 29', '2021 8 4')", "('2021 8 5', '2021 8 11')", "('2021 8 12', '2021 8 18')", "('2021 8 19', '2021 8 25')", "('2021 10 6', '2021 10 12')", "('2021 10 13', '2021 10 19')", "('2021 10 20', '2021 10 26')", "('2021 10 27', '2021 11 2')", "('2021 11 3', '2021 11 9')", "('2021 11 10', '2021 11 16')", "('2021 11 17', '2021 11 23')", "('2021 12 14', '2021 12 20')", "('2021 12 21', '2021 12 27')"]

# Oxigeno
outliers1 = ["('2019 1 7', '2019 1 13')", "('2019 1 14', '2019 1 20')", "('2019 5 9', '2019 5 15')", "('2019 5 23', '2019 5 29')", "('2019 6 6', '2019 6 12')", "('2019 6 20', '2019 6 26')", "('2019 10 22', '2019 10 28')", "('2020 1 13', '2020 1 19')", "('2020 2 17', '2020 2 23')", "('2020 3 7', '2020 3 13')", "('2020 12 15', '2020 12 21')", "('2021 1 19', '2021 1 25')", "('2021 2 2', '2021 2 8')", "('2021 3 20', '2021 3 26')", "('2021 10 20', '2021 10 26')", "('2021 10 27', '2021 11 2')", "('2021 12 14', '2021 12 20')"]
# Temperatura
outliers2 = ["('2019 1 7', '2019 1 13')", "('2019 7 17', '2019 7 23')", "('2019 7 24', '2019 7 30')", "('2019 7 31', '2019 8 6')", "('2019 8 7', '2019 8 13')", "('2020 1 13', '2020 1 19')", "('2020 1 20', '2020 1 26')", "('2020 7 23', '2020 7 29')", "('2020 7 30', '2020 8 5')", "('2020 8 6', '2020 8 12')", "('2021 1 5', '2021 1 11')", "('2021 1 12', '2021 1 18')", "('2021 7 22', '2021 7 28')", "('2021 8 12', '2021 8 18')"]
# Conductividad
outliers3 = ["('2019 12 2', '2019 12 8')", "('2020 3 7', '2020 3 13')", "('2020 9 24', '2020 9 30')", "('2020 12 15', '2020 12 21')", "('2020 12 29', '2021 1 4')", "('2021 1 12', '2021 1 18')", "('2021 1 19', '2021 1 25')", "('2021 2 2', '2021 2 8')", "('2021 2 9', '2021 2 15')", "('2021 5 21', '2021 5 27')", "('2021 10 6', '2021 10 12')", "('2021 10 13', '2021 10 19')", "('2021 10 20', '2021 10 26')", "('2021 10 27', '2021 11 2')", "('2021 11 3', '2021 11 9')", "('2021 12 14', '2021 12 20')"]
# Caudal
outliers4 = ["('2019 2 11', '2019 2 17')", "('2019 12 2', '2019 12 8')", "('2020 3 7', '2020 3 13')", "('2020 7 23', '2020 7 29')", "('2020 12 1', '2020 12 7')", "('2021 1 12', '2021 1 18')", "('2021 1 19', '2021 1 25')", "('2021 2 2', '2021 2 8')", "('2021 2 9', '2021 2 15')", "('2021 10 6', '2021 10 12')", "('2021 10 13', '2021 10 19')", "('2021 10 20', '2021 10 26')", "('2021 10 27', '2021 11 2')", "('2021 11 10', '2021 11 16')", "('2021 12 14', '2021 12 20')"] 
# Turbidez
outliers5 = ["('2019 1 7', '2019 1 13')", "('2019 1 14', '2019 1 20')", "('2019 3 8', '2019 3 14')", "('2019 10 22', '2019 10 28')", "('2019 12 2', '2019 12 8')", "('2020 2 17', '2020 2 23')", "('2020 3 7', '2020 3 13')", "('2020 4 11', '2020 4 17')", "('2021 2 9', '2021 2 15')", "('2021 6 11', '2021 6 17')", "('2021 10 6', '2021 10 12')", "('2021 10 13', '2021 10 19')", "('2021 11 17', '2021 11 23')", "('2021 12 14', '2021 12 20')", "('2021 12 21', '2021 12 27')"]
# Amonio
outliers6 = ["('2019 1 7', '2019 1 13')", "('2019 7 17', '2019 7 23')", "('2019 7 24', '2019 7 30')", "('2019 7 31', '2019 8 6')", "('2019 10 8', '2019 10 14')", "('2019 10 22', '2019 10 28')", "('2019 10 29', '2019 11 4')", "('2019 12 2', '2019 12 8')", "('2020 1 20', '2020 1 26')", "('2020 5 1', '2020 5 7')", "('2020 12 22', '2020 12 28')", "('2020 12 29', '2021 1 4')", "('2021 1 12', '2021 1 18')", "('2021 1 19', '2021 1 25')", "('2021 4 24', '2021 4 30')", "('2021 10 6', '2021 10 12')"]

def heatmap(timeStamps, outliers1, outliers2):

    data1 = []
    for i in timeStamps:

        for j in outliers1:

            if j in i:
                data1.append(1)
                break
            
        else:
            data1.append(0)
    
    data2 = []
    for i in timeStamps:

        for j in outliers2:

            if j in i:
                data2.append(1)
                break
            
        else:
            data2.append(0)
    
    data_tuple = list(zip(data1, data2))

    df = pd.DataFrame(data_tuple, columns=['Oxygen', 'Temperature'])

    # Plot the heatmap
    if len(timeStamps) >= 100:

        df = df.transpose()
        # Plot the heatmap
        fig, axes = plt.subplots(figsize=(10, 5))
        plt.rcParams["font.family"] = "serif"

        sb.heatmap(df, cmap='rocket_r', linewidths=1, cbar=False)
        plt.title('Outliers in the time series')
        plt.xlabel("Weeks")
        fig.savefig('heatmap.png')
        
        plt.close(fig)

    # elif 100 < len(timeStamps) <= 200:
        
    #     df1, df2 = df.iloc[0:100], df.iloc[100:]
    #     df1, df2 = df1.transpose(), df2.transpose()

    #     fig, (ax1, ax2) = plt.subplots(2, figsize=(10, 3))
    #     plt.rcParams["font.family"] = "serif"
        
    #     graph1 = sb.heatmap(df1, cmap='Reds', linewidths=1, cbar=False, square=True, ax=ax1)

    #     graph2 = sb.heatmap(df2, cmap='Reds', linewidths=1, cbar=False, square=True, ax=ax2)
    #     plt.title('Outliers in the time series')
    #     fig.savefig('heatmap.png')
        
    #     plt.close(fig)
    
    plt.close('all')
    print('DONE')

heatmap(timeStamps, outliers1, outliers2)
